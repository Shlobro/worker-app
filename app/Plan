# Worker Tracking App - Development Plan

## Priority 1: Critical Features

### 1. Reference Worker Payment System ✅ COMPLETED
**Goal**: Implement reference worker fee calculation during shift assignment
- **Task**: When adding a worker with a reference to a shift, prompt user for reference hourly rate
- **Implementation**: 
  - ✅ Add reference payment field to ShiftWorker entity
  - ✅ Create prompt dialog during worker assignment
  - ✅ Show reference worker name and payment input
  - ✅ Include reference cost in shift total calculation
  - ✅ Display reference payments visually on worker cards in shift area
- **UI Requirements**: Clear visual indication of reference payments on worker cards
- **Database**: Updated to version 12 with referencePayRate field in shift_workers table

### 2. Event Income and Profit Tracking ✅ COMPLETED
**Goal**: Add financial tracking to events similar to projects
- **Task**: Implement event payment amounts and profit calculation
- **Implementation**:
  - ✅ Add income field to Event entity
  - ✅ Create event profit calculation (income - worker payments)
  - ✅ Display financial summary in event details
  - ✅ Show profit/loss with color indicators
- **UI Requirements**: Event details screen showing income, worker costs, and profit
- **Database**: Updated to version 13 with income field in events table

### 3. Project Income History View ✅ COMPLETED
**Goal**: Make project income entries clickable and viewable
- **Task**: Create detailed income history screen
- **Implementation**:
  - ✅ Make income summary in project details clickable
  - ✅ Create ProjectIncomeListScreen showing all income entries
  - ✅ Display date, description, amount, and units for each entry
  - ✅ Add ability to edit/delete individual income entries
- **UI Requirements**: ✅ List view with income entry details and edit/delete actions
- **Database**: No changes required - used existing ProjectIncome entity and DAO methods

## Priority 2: Essential Features

### 4. Event Deletion Functionality ✅ COMPLETED
**Goal**: Allow events to be deleted like other entities
- **Task**: Implement delete functionality for events
- **Implementation**:
  - ✅ Add delete option in event detail screen
  - ✅ Cascade delete EventWorker relationships (already configured in database)
  - ✅ Add confirmation dialog
  - ✅ Update event list after deletion
- **UI Requirements**: ✅ Delete button in event details with confirmation
- **Database**: EventWorker entity already has CASCADE delete configured
- **Navigation**: ✅ Events now navigate to EventDetailScreen instead of EditEvent

### 5. Event Detail and Management Screen ✅ COMPLETED
**Goal**: Create comprehensive event detail screen
- **Task**: Build event detail screen with full management capabilities
- **Implementation**:
  - ✅ Create EventDetailScreen similar to project details
  - ✅ Show event info, assigned workers, and financial summary
  - ✅ Add ability to assign/remove workers from event
  - ✅ Include edit and delete options
  - ✅ Show worker list with hours and payment rates
- **UI Requirements**: ✅ Full-featured detail screen with worker management
- **Database**: No changes required - used existing EventWorker entity and DAO methods
- **Navigation**: ✅ EventDetailScreen integrated with worker management navigation

### 6. Worker Photo Album System ✅ COMPLETED
**Goal**: Add photo management for workers
- **Task**: Implement photo album functionality for workers
- **Implementation**:
  - ✅ Add photo storage capability to Worker entity
  - ✅ Create photo gallery screen for each worker
  - ✅ Implement photo capture/selection from gallery
  - ✅ Add photo sharing functionality
  - ✅ Display worker photos in worker details
- **UI Requirements**: ✅ Photo gallery with add, view, and share options
- **Database**: Updated to version 14 with photoUris field in workers table

## Priority 3: Enhanced Features

### 7. Event Time Management ✅ COMPLETED
**Goal**: Add start/end time tracking to events
- **Task**: Implement time fields for events
- **Implementation**:
  - ✅ Add startTime and endTime fields to Event entity
  - ✅ Update AddEventScreen and EditEventScreen with time inputs
  - ✅ Implement smart time formatting (HHMM → HH:MM)
  - ✅ Auto-calculate event duration
- **UI Requirements**: ✅ Time input fields with auto-formatting

### 8. Search Functionality for Events and Projects ✅ COMPLETED
**Goal**: Add search capability to events and projects
- **Task**: Implement search functionality
- **Implementation**:
  - ✅ Add search field to EventsScreen
  - ✅ Add search field to ProjectsScreen
  - ✅ Implement real-time filtering by name (events) and name/location (projects)
  - ✅ Use case-insensitive search
  - ✅ Add Hebrew string resources for search functionality
- **UI Requirements**: ✅ Search bars in list screens with real-time filtering

### 9. Complete Dashboard Redesign
**Goal**: Rebuild dashboard with comprehensive analytics
- **Task**: Create new dashboard with financial analytics
- **Implementation**:
  - Design new dashboard layout
  - Add revenue/expenses/profit summary with date filtering
  - Display active projects list
  - Show current and future events
  - Add money owed tracking section
  - Implement date range picker for filtering
- **UI Requirements**: Modern analytics dashboard with charts and filters

## Implementation Notes

### Database Changes Required
- Add reference payment fields to ShiftWorker entity
- Add income field to Event entity
- Add photo storage fields to Worker entity
- Add time fields to Event entity
- Update database version and migrations

### UI/UX Considerations
- Maintain Hebrew localization for all new features
- Follow Material 3 design principles
- Ensure consistent navigation patterns
- Add proper loading states and error handling
- Use existing theme components

### Technical Requirements
- Update repositories with new functionality
- Create new ViewModels for complex screens
- Implement proper state management
- Add photo handling permissions and storage
- Ensure data integrity with proper relationships

### Testing Strategy
- Test database migrations thoroughly
- Verify financial calculations accuracy
- Test photo upload/sharing functionality
- Validate search performance
- Test time input formatting

## Success Criteria
Each feature should be:
- ✅ Fully functional with no crashes
- ✅ Properly localized in Hebrew
- ✅ Following existing UI patterns
- ✅ Integrated with navigation system
- ✅ Tested with sample data
- ✅ Performance optimized