1. Project Overview
The entire app should be in hebrew, with all text and labels localized for Hebrew speakers. The app will be called
The Project and Worker Management System is a mobile  application designed to streamline the management of projects, workers, and finances. Its primary goal is to provide a centralized platform for businesses or individuals to efficiently track worker shifts, calculate payments, monitor project income, and gain clear financial insights. The app will reduce administrative overhead and prevent errors in payroll and project accounting.

2. Core Modules & Features
The app is built around three main modules: Projects, Workers, and Events. Each module contains specific functionalities.

Projects Module
Project Creation: Users can create new projects by providing:

Project Name: A descriptive title for the project.

Location: The physical location of the project.

Start Date: The official start date of the project.

Income Tracking: For each project, users can define how they earn revenue:

Rate-Based: Daily, weekly, hourly, or monthly rate.

Fixed Amount: A single, global amount for the entire project.

Shift Management:

Shift Creation: Add individual shifts with a specific Worker, Date, Time, Hours worked, and Payment per hour.

Future Shifts: The ability to pre-schedule shifts for upcoming dates.

Shift View: A clear, organized view of all shifts within a project, including which workers were assigned to them.

Project Statistics:

Total Project Income: A calculation of the total revenue based on the defined income tracking method.

Total Worker Cost: The total amount owed to workers for all shifts within the project.

Net Profit/Loss: A clear view of the difference between project income and total worker costs.

Workers Module
Worker Database: A centralized list of all workers with their essential details.

Worker Profile: For each worker, the app will track:

Project History: A comprehensive list of all projects they have worked on.

Event History: A list of all events they have participated in.

Total Owed: The total amount of money the user currently owes the worker across all projects and events.

Payment History: A record of all payments made to the worker.

Pending Payments: A clear display of what still needs to be paid.

Reference Management: The app will handle special cases where a "reference" worker receives a percentage or fixed amount per hour for each worker they referred. This will be automatically calculated and added to the reference's owed amount.

Events Module
Event Creation: Create one-off events with:

Event Name: A title for the event.

Date & Time: The specific date and time of the event.

Worker Assignment: Assign multiple workers to an event. Each worker's time and pay will be calculated and tracked within their profile.

3. Financial Dashboard & Reporting
The app will feature a top-level dashboard that provides a clear financial overview.

Total Income: The combined total of all project incomes.

Total Payments Owed: The total amount owed to all workers across all projects and events.

Net Financial Status: The difference between total income and total payments owed, providing a quick look at the business's overall financial health.

4. Technical Specifications (High-Level)
Database Schema: The app will require a relational database to manage the connections between projects, workers, shifts, and payments.

Projects Table: project_id, name, location, start_date, income_type, income_amount.

Workers Table: worker_id, name, contact_info, reference_id (if applicable).

Shifts Table: shift_id, project_id, worker_id, date, start_time, end_time, hours, pay_rate.

Events Table: event_id, name, date, time.

Event_Workers Table: event_id, worker_id.

Payments Table: payment_id, worker_id, amount, date_paid, source_project/event.

Technology Stack:

Front-end: A modern framework like React, Vue.js, or a native mobile stack like React Native or Flutter.

Back-end: A robust and scalable back-end like Node.js, Python/Django, or Ruby on Rails.

Database: A relational database like PostgreSQL or MySQL.

Data Security: All financial and personal information will be protected using industry-standard encryption and security protocols.

5. Development Phases
Phase 1: Core Functionality (MVP)

Build the basic Project, Worker, and Shift creation/management.

Implement the core payment calculation logic.

Create the Worker Profile and "Total Owed" view.

Develop the basic financial dashboard.

Phase 2: Enhancements

Add the Events module.

Implement the Reference worker payment logic.

Build out the detailed payment history and tracking.

Improve the financial dashboard with charts and more detailed reporting.

Phase 3: Optimization & Scaling

User authentication and multi-user support.

Performance optimizations and bug fixes.

Future features like invoicing, expense tracking, or reporting exports.